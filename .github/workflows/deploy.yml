name: Deploy Two-Tier Web App to AWS

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0
  REPO_NAME: Deploy-2-Tier-Application-With-Terraform-and-Github-Actions

jobs:
  terraform-validate-plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform
        run: |
          cat << EOF > backend.hcl
          bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          key            = "global/s3/terraform.tfstate"
          region         = "us-east-1"
          dynamodb_table = "terraform-state-lock-db"
          EOF
          terraform init -backend-config=backend.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan
          retention-days: 1

  terraform-apply:
    needs: terraform-validate-plan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    outputs:
      rds_endpoint: ${{ steps.tf-outputs.outputs.rds_endpoint }}
      bastion_public_ip: ${{ steps.tf-outputs.outputs.bastion_public_ip }}
      web_server_1_public_ip: ${{ steps.tf-outputs.outputs.web_server_1_public_ip }}
      web_server_2_public_ip: ${{ steps.tf-outputs.outputs.web_server_2_public_ip }}
      cloudfront_domain: ${{ steps.tf-outputs.outputs.cloudfront_domain }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform/

      - name: Terraform Init
        working-directory: terraform
        run: |
          cat << EOF > backend.hcl
          bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          key            = "global/s3/terraform.tfstate"
          region         = "us-east-1"
          dynamodb_table = "terraform-state-lock-db"
          EOF
          terraform init -backend-config=backend.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}

      - name: Get Outputs
        id: tf-outputs
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "rds_endpoint=$(terraform output -raw rds_endpoint || echo '')" >> $GITHUB_OUTPUT
          echo "bastion_public_ip=$(terraform output -raw bastion_public_ip || echo '')" >> $GITHUB_OUTPUT
          echo "web_server_1_public_ip=$(terraform output -raw web_server_1_public_ip || echo '')" >> $GITHUB_OUTPUT
          echo "web_server_2_public_ip=$(terraform output -raw web_server_2_public_ip || echo '')" >> $GITHUB_OUTPUT
          echo "cloudfront_domain=$(terraform output -raw cloudfront_domain || echo '')" >> $GITHUB_OUTPUT

  deploy-application:
    needs: terraform-apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    strategy:
      matrix:
        web_server_ip:
          - ${{ needs.terraform-apply.outputs.web_server_1_public_ip }}
          - ${{ needs.terraform-apply.outputs.web_server_2_public_ip }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > bastion-host-key.pem
          chmod 600 bastion-host-key.pem

      - name: Configure Database Schema via Bastion Host
        if: matrix.web_server_ip == needs.terraform-apply.outputs.web_server_1_public_ip
        run: |
          ssh -i bastion-host-key.pem -o StrictHostKeyChecking=no ec2-user@${{ needs.terraform-apply.outputs.bastion_public_ip }} << 'EOF'
            set -e # Exit immediately if a command fails

            # Install MySQL Client
            sudo wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm
            sudo yum localinstall mysql80-community-release-el7-3.noarch.rpm -y
            sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
            sudo yum install -y mysql-community-client

            # Separate the hostname from the full endpoint string
            FULL_RDS_ENDPOINT="${{ needs.terraform-apply.outputs.rds_endpoint }}"
            RDS_HOSTNAME=$(echo $FULL_RDS_ENDPOINT | cut -d: -f1)

            # Store the SQL commands in a variable
            SQL_SCRIPT=$(cat <<END_SQL
              CREATE DATABASE IF NOT EXISTS SmartTodoWebAppDB;
              USE SmartTodoWebAppDB;
              CREATE TABLE IF NOT EXISTS Tasks (
                id INT AUTO_INCREMENT PRIMARY KEY,
                task_name VARCHAR(255) NOT NULL,
                task_description TEXT,
                due_date DATE NULL,
                completed BOOLEAN DEFAULT FALSE
              );
END_SQL
)

            # Provide the password via an environment variable
            export MYSQL_PWD='${{ secrets.DB_PASSWORD }}'

            # Pipe the SQL script variable into the mysql client
            echo "$SQL_SCRIPT" | mysql -h "$RDS_HOSTNAME" -P 3306 -u ${{ secrets.DB_USERNAME }}

            # Unset the variable for security
            unset MYSQL_PWD
          EOF

      - name: Deploy Application to ${{ matrix.web_server_ip }}
        run: |
          ssh -i bastion-host-key.pem -o StrictHostKeyChecking=no ec2-user@${{ matrix.web_server_ip }} << 'EOF'
            # (The user_data.sh script should handle this, but this is a failsafe)
            echo "Deployment to web server ${{ matrix.web_server_ip }} starting..."
            # Add application deployment logic here if not handled by user_data
          EOF