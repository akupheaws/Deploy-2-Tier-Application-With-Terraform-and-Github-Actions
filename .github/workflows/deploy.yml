name: Deploy Two-Tier Web App to AWS

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0
  REPO_NAME: Deploy-2-Tier-Application-With-Terraform-and-Github-Actions

jobs:
  terraform-validate-plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform
        run: |
          cat > backend.hcl <<EOF
          bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          key            = "global/s3/terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          dynamodb_table = "terraform-state-lock-db"
          EOF
          terraform init -backend-config=backend.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan

  terraform-apply:
    needs: terraform-validate-plan
    runs-on: ubuntu-latest
    outputs:
      rds_endpoint: ${{ steps.tf-outputs.outputs.rds_endpoint }}
      bastion_public_ip: ${{ steps.tf-outputs.outputs.bastion_public_ip }}
      web_server_1_public_ip: ${{ steps.tf-outputs.outputs.web_server_1_public_ip }}
      web_server_2_public_ip: ${{ steps.tf-outputs.outputs.web_server_2_public_ip }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform

      - name: Terraform Init
        working-directory: terraform
        run: |
          cat > backend.hcl <<EOF
          bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          key            = "global/s3/terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          dynamodb_table = "terraform-state-lock-db"
          EOF
          terraform init -backend-config=backend.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}

      - name: Get Outputs
        id: tf-outputs
        working-directory: terraform
        run: |
          echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
          echo "bastion_public_ip=$(terraform output -raw bastion_public_ip)" >> $GITHUB_OUTPUT
          echo "web_server_1_public_ip=$(terraform output -raw web_server_1_public_ip)" >> $GITHUB_OUTPUT
          echo "web_server_2_public_ip=$(terraform output -raw web_server_2_public_ip)" >> $GITHUB_OUTPUT

  create-db-schema:
    needs: terraform-apply
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > bastion-host-key.pem
          chmod 600 bastion-host-key.pem

      - name: Connect to Bastion and Setup DB
        run: |
          ssh -i bastion-host-key.pem -o StrictHostKeyChecking=no ec2-user@${{ needs.terraform-apply.outputs.bastion_public_ip }} << EOF
            sudo dnf update -y
            curl -fsSL https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm -o mysql.rpm
            sudo dnf install -y mysql.rpm
            sudo dnf install -y mysql-community-client
            mysql -h $(echo "${{ needs.terraform-apply.outputs.rds_endpoint }}" | cut -d: -f1) -P 3306 -u "${{ secrets.DB_USERNAME }}" -p"${{ secrets.DB_PASSWORD }}" <<EOSQL
            CREATE DATABASE IF NOT EXISTS SmartTodoWebAppDB;
            USE SmartTodoWebAppDB;
            CREATE TABLE IF NOT EXISTS Tasks (
              id INT AUTO_INCREMENT PRIMARY KEY,
              task_name VARCHAR(255) NOT NULL,
              task_description TEXT,
              due_date DATE,
              completed BOOLEAN DEFAULT FALSE
            );
EOSQL
          EOF

  deploy-app:
    needs: [terraform-apply, create-db-schema]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        web_server_ip:
          - ${{ needs.terraform-apply.outputs.web_server_1_public_ip }}
          - ${{ needs.terraform-apply.outputs.web_server_2_public_ip }}
    steps:
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > bastion-host-key.pem
          chmod 600 bastion-host-key.pem

      - name: Deploy App to EC2
        run: |
          ssh -i bastion-host-key.pem -o StrictHostKeyChecking=no ec2-user@${{ matrix.web_server_ip }} << 'EOF'
            set -e
            sudo dnf update -y
            sudo dnf install -y git nginx
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo dnf install -y nodejs
            rm -rf Deploy-2-Tier-Application-With-Terraform-and-Github-Actions || true
            git clone https://github.com/akupheaws/Deploy-2-Tier-Application-With-Terraform-and-Github-Actions.git
            cd Deploy-2-Tier-Application-With-Terraform-and-Github-Actions
            echo "DB_HOST=$(echo "${{ needs.terraform-apply.outputs.rds_endpoint }}" | cut -d: -f1)" > .env
            echo "DB_USER=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_NAME=SmartTodoWebAppDB" >> .env
            echo "PORT=3306" >> .env
            echo "API_BASE_URL=http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)" >> .env
            npm install
            sudo npm install -g pm2
            pm2 start index.js || pm2 restart index.js
            pm2 save
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user || true
            sudo bash -c 'cat > /etc/nginx/nginx.conf <<EOT
            events { worker_connections 1024; }
            http {
              server {
                listen 80;
                server_name _;
                location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
                }
              }
            }
            EOT'
            sudo systemctl restart nginx
            sudo systemctl enable nginx
          EOF
