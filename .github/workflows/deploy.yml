name: Deploy Two-Tier Web App to AWS

on:
  push:
    branches: [master]

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0
  REPO_NAME: Deploy-2-Tier-Application-With-Terraform-and-Github-Actions

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      rds_endpoint: ${{ steps.outputs.outputs.rds_endpoint }}
      bastion_public_ip: ${{ steps.outputs.outputs.bastion_public_ip }}
      web_server_1: ${{ steps.outputs.outputs.web_server_1 }}
      web_server_2: ${{ steps.outputs.outputs.web_server_2 }}

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init & Plan
        working-directory: terraform
        run: |
          cat <<EOF > backend.hcl
          bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          key            = "global/s3/terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          dynamodb_table = "terraform-state-lock-db"
          EOF
          terraform init -backend-config=backend.hcl
          terraform plan -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}

      - name: Export Outputs
        id: outputs
        working-directory: terraform
        run: |
          echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
          echo "bastion_public_ip=$(terraform output -raw bastion_public_ip)" >> $GITHUB_OUTPUT
          echo "web_server_1=$(terraform output -raw web_server_1_public_ip)" >> $GITHUB_OUTPUT
          echo "web_server_2=$(terraform output -raw web_server_2_public_ip)" >> $GITHUB_OUTPUT

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        web_ip: [ "${{ needs.terraform.outputs.web_server_1 }}", "${{ needs.terraform.outputs.web_server_2 }}" ]

    steps:
      - uses: actions/checkout@v4

      - name: Prepare SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > bastion-host-key.pem
          chmod 600 bastion-host-key.pem

      - name: Deploy App to EC2
        run: |
          ssh -i bastion-host-key.pem -o StrictHostKeyChecking=no ec2-user@${{ matrix.web_ip }} << EOF
          set -e
          echo ">>> Updating"
          sudo dnf update -y

          echo ">>> Installing Git and Nginx"
          sudo dnf install -y git nginx

          echo ">>> Installing Node.js 18"
          curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
          sudo dnf install -y nodejs

          echo ">>> Removing old repo if exists"
          rm -rf ${{ env.REPO_NAME }}

          echo ">>> Cloning repo"
          git clone https://github.com/akupheaws/${{ env.REPO_NAME }}.git
          cd ${{ env.REPO_NAME }}

          echo ">>> Creating .env file"
          RDS_HOSTNAME=$(echo "${{ needs.terraform.outputs.rds_endpoint }}" | cut -d: -f1)
          PUBLIC_IP=\$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          echo "DB_HOST=\$RDS_HOSTNAME" > .env
          echo "DB_USER=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=SmartTodoWebAppDB" >> .env
          echo "PORT=3306" >> .env
          echo "API_BASE_URL=http://\$PUBLIC_IP" >> .env

          echo ">>> Installing app dependencies"
          npm install

          echo ">>> Installing PM2"
          sudo npm install -g pm2

          echo ">>> Starting app"
          pm2 start index.js || pm2 restart index.js
          pm2 save
          sudo env PATH=\$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user || true

          echo ">>> Configuring NGINX"
          sudo bash -c 'cat > /etc/nginx/nginx.conf' <<EOT
          events {
            worker_connections 1024;
          }
          http {
            server {
              listen 80;
              server_name _;
              location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
              }
            }
          }
          EOT

          sudo systemctl restart nginx
          sudo systemctl enable nginx
          echo ">>> App Deployed Successfully!"
          sleep 5
          EOF
