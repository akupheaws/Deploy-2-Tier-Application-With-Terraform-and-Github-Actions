
name: Deploy Two-Tier Web App to AWS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  terraform-validate-plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform
        run: |
          cat <<EOF > backend.hcl
          bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          key            = "global/s3/terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          dynamodb_table = "terraform-state-lock-db"
          EOF
          terraform init -backend-config=backend.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}

      - uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan

  terraform-apply:
    needs: terraform-validate-plan
    runs-on: ubuntu-latest
    outputs:
      rds_endpoint: ${{ steps.tf-outputs.outputs.rds_endpoint }}
      web_server_1_public_ip: ${{ steps.tf-outputs.outputs.web_server_1_public_ip }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: terraform

      - name: Terraform Init
        working-directory: terraform
        run: |
          cat <<EOF > backend.hcl
          bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          key            = "global/s3/terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          dynamodb_table = "terraform-state-lock-db"
          EOF
          terraform init -backend-config=backend.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}

      - name: Get Outputs
        id: tf-outputs
        working-directory: terraform
        run: |
          echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
          echo "web_server_1_public_ip=$(terraform output -raw web_server_1_public_ip)" >> $GITHUB_OUTPUT

  deploy-application:
    name: Deploy Node.js App
    needs: terraform-apply
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      - name: Upload deploy script to EC2
        run: |
          scp -i ec2-key.pem -o StrictHostKeyChecking=no scripts/deploy.sh ec2-user@${{ needs.terraform-apply.outputs.web_server_1_public_ip }}:/home/ec2-user/deploy.sh

      - name: Run deploy script on EC2
        run: |
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@${{ needs.terraform-apply.outputs.web_server_1_public_ip }}           "chmod +x deploy.sh && ./deploy.sh '${{ needs.terraform-apply.outputs.rds_endpoint }}' '${{ secrets.DB_USERNAME }}' '${{ secrets.DB_PASSWORD }}'"
